{
    "sourceFile": "src/pages/AiAssistant.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 3,
            "patches": [
                {
                    "date": 1760210070821,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1761673209231,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,106 @@\n import { useState } from 'react'\n-import api from '../api/axiosConfig'\n+import { Form, Button, Card, Spinner, Container } from 'react-bootstrap'\n+import axios from 'axios'\n \n-export default function AiAssistant(){\n-  const [q, setQ] = useState('')\n-  const [a, setA] = useState('Ask the AI a question about your events!')\n-  const ask = async ()=>{\n-    const { data } = await api.post('/ai/ask', { question: q })\n-    setA(data.answer || 'No answer')\n+// make sure axios is already using your baseURL (VITE_API_BASE_URL), \n+// or import from your api file if you already set that up\n+// otherwise you can do: const API = axios.create({ baseURL: import.meta.env.VITE_API_BASE_URL })\n+\n+export default function AiPage() {\n+  const [question, setQuestion] = useState('')\n+  const [answer, setAnswer] = useState('')\n+  const [loading, setLoading] = useState(false)\n+  const [error, setError] = useState('')\n+\n\\ No newline at end of file\n+  async function askAI(e) {\n+    e.preventDefault()\n+    if (!question.trim()) return\n+\n+    setLoading(true)\n+    setError('')\n+    setAnswer('')\n+\n+    try {\n+      const { data } = await axios.post(\n+        `${import.meta.env.VITE_API_BASE_URL}/api/v1/ai/ask`,\n+        { question }\n+      )\n+      setAnswer(data.answer || '(no answer returned)')\n+    } catch (err) {\n+      console.error(err)\n+      setError(\n+        err?.response?.data?.message ||\n+        err.message ||\n+        'Something went wrong'\n+      )\n+    } finally {\n+      setLoading(false)\n+    }\n   }\n+\n+  // reset chat for new question\n+  function resetAll() {\n+    setQuestion('')\n+    setAnswer('')\n+    setError('')\n+  }\n+\n   return (\n-    <div>\n-      <h2>AI Event Assistant</h2>\n-      <div className=\"input-group my-3\">\n-        <input className=\"form-control\" value={q} onChange={e=>setQ(e.target.value)} placeholder=\"e.g., What tech events are this month?\" />\n-        <button className=\"btn btn-primary\" onClick={ask}>Ask AI</button>\n-      </div>\n-      <div className=\"border rounded p-3 bg-body-tertiary\">{a}</div>\n-    </div>\n+    <Container style={{ maxWidth: 700 }} className=\"py-4\">\n+      <h2 className=\"mb-3\">Ask AI about Events</h2>\n+      <p className=\"text-muted\">\n+        Ask something like: \"What is coding-6?\" or \"When is code round?\"\n+        Each question is answered fresh. No chat history is saved.\n+      </p>\n+\n+      <Form onSubmit={askAI} className=\"mb-4\">\n+        <Form.Group className=\"mb-3\">\n+          <Form.Label>Your question</Form.Label>\n+          <Form.Control\n+            as=\"textarea\"\n+            rows={3}\n+            placeholder='e.g. \"What is coding-6?\"'\n+            value={question}\n+            onChange={e => setQuestion(e.target.value)}\n+            disabled={loading}\n+          />\n+        </Form.Group>\n+\n+        <div className=\"d-flex gap-2\">\n+          <Button type=\"submit\" disabled={loading}>\n+            {loading ? (\n+              <>\n+                <Spinner animation=\"border\" size=\"sm\" className=\"me-2\" />\n+                Thinking…\n+              </>\n+            ) : (\n+              'Ask'\n+            )}\n+          </Button>\n+\n+          <Button\n+            variant=\"outline-secondary\"\n+            type=\"button\"\n+            onClick={resetAll}\n+            disabled={loading}\n+          >\n+            New Question\n+          </Button>\n+        </div>\n+      </Form>\n+\n+      {(answer || error) && (\n+        <Card className=\"shadow-sm\">\n+          <Card.Header>Answer</Card.Header>\n+          <Card.Body>\n+            {error ? (\n+              <div className=\"text-danger\">{error}</div>\n+            ) : (\n+              <div style={{ whiteSpace: 'pre-wrap' }}>{answer}</div>\n+            )}\n+          </Card.Body>\n+        </Card>\n+      )}\n+    </Container>\n   )\n-}\n+}\n"
                },
                {
                    "date": 1761680046871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,106 +1,104 @@\n-import { useState } from 'react'\n-import { Form, Button, Card, Spinner, Container } from 'react-bootstrap'\n-import axios from 'axios'\n+import { useState } from 'react';\n+import axios from 'axios';\n \n-// make sure axios is already using your baseURL (VITE_API_BASE_URL), \n-// or import from your api file if you already set that up\n-// otherwise you can do: const API = axios.create({ baseURL: import.meta.env.VITE_API_BASE_URL })\n+// point axios to backend base URL\n+// You already have axiosConfig.js — if that file exports axios with baseURL,\n+// just import that instead of raw axios.\n+// I'll show both options:\n \n+// OPTION A: if you already have axiosConfig.js configured with baseURL\n+// import api from '../api/axiosConfig';\n+\n+// OPTION B: quick inline instance (use this if you don't have axiosConfig ready in this file)\n+const api = axios.create({\n+  baseURL: import.meta.env.VITE_API_BASE || 'http://localhost:5000/api/v1',\n+  withCredentials: true,\n+});\n+\n export default function AiPage() {\n-  const [question, setQuestion] = useState('')\n-  const [answer, setAnswer] = useState('')\n-  const [loading, setLoading] = useState(false)\n-  const [error, setError] = useState('')\n+  const [question, setQuestion] = useState('');\n+  const [answer, setAnswer] = useState('');\n+  const [loading, setLoading] = useState(false);\n+  const [errMsg, setErrMsg] = useState('');\n \n-  async function askAI(e) {\n-    e.preventDefault()\n-    if (!question.trim()) return\n+  const askAI = async (e) => {\n+    e.preventDefault();\n+    if (!question.trim()) return;\n \n-    setLoading(true)\n-    setError('')\n-    setAnswer('')\n+    setLoading(true);\n+    setErrMsg('');\n+    setAnswer('');\n \n     try {\n-      const { data } = await axios.post(\n-        `${import.meta.env.VITE_API_BASE_URL}/api/v1/ai/ask`,\n-        { question }\n-      )\n-      setAnswer(data.answer || '(no answer returned)')\n+      const { data } = await api.post('/ai/ask', { question });\n+      setAnswer(data.answer || '(no answer)');\n     } catch (err) {\n-      console.error(err)\n-      setError(\n+      console.error('AI error:', err?.response || err);\n+      setErrMsg(\n         err?.response?.data?.message ||\n-        err.message ||\n-        'Something went wrong'\n-      )\n+        'Something went wrong. Please try again.'\n+      );\n     } finally {\n-      setLoading(false)\n+      setLoading(false);\n     }\n-  }\n+  };\n \n-  // reset chat for new question\n-  function resetAll() {\n-    setQuestion('')\n-    setAnswer('')\n-    setError('')\n-  }\n+  const clearAll = () => {\n+    setQuestion('');\n+    setAnswer('');\n+    setErrMsg('');\n+  };\n \n   return (\n-    <Container style={{ maxWidth: 700 }} className=\"py-4\">\n-      <h2 className=\"mb-3\">Ask AI about Events</h2>\n+    <div className=\"py-4\" style={{ maxWidth: 640 }}>\n+      <h2 className=\"mb-3\">Ask AI</h2>\n       <p className=\"text-muted\">\n-        Ask something like: \"What is coding-6?\" or \"When is code round?\"\n-        Each question is answered fresh. No chat history is saved.\n+        Ask anything. Each question is answered fresh (it doesn’t remember old\n+        chats). Example: “What is coding event?” or “Is today Sunday?”\n       </p>\n \n-      <Form onSubmit={askAI} className=\"mb-4\">\n-        <Form.Group className=\"mb-3\">\n-          <Form.Label>Your question</Form.Label>\n-          <Form.Control\n-            as=\"textarea\"\n-            rows={3}\n-            placeholder='e.g. \"What is coding-6?\"'\n-            value={question}\n-            onChange={e => setQuestion(e.target.value)}\n\\ No newline at end of file\n-            disabled={loading}\n-          />\n-        </Form.Group>\n+      <form onSubmit={askAI} className=\"mb-3\">\n+        <textarea\n+          className=\"form-control mb-2\"\n+          rows={3}\n+          placeholder=\"Type your question here…\"\n+          value={question}\n+          onChange={(e) => setQuestion(e.target.value)}\n+          disabled={loading}\n+          required\n+        />\n \n         <div className=\"d-flex gap-2\">\n-          <Button type=\"submit\" disabled={loading}>\n-            {loading ? (\n-              <>\n-                <Spinner animation=\"border\" size=\"sm\" className=\"me-2\" />\n-                Thinking…\n-              </>\n-            ) : (\n-              'Ask'\n-            )}\n-          </Button>\n+          <button\n+            type=\"submit\"\n+            className=\"btn btn-primary\"\n+            disabled={loading}\n+          >\n+            {loading ? 'Thinking…' : 'Ask'}\n+          </button>\n \n-          <Button\n-            variant=\"outline-secondary\"\n+          <button\n             type=\"button\"\n-            onClick={resetAll}\n-            disabled={loading}\n+            className=\"btn btn-outline-secondary\"\n+            onClick={clearAll}\n+            disabled={loading && !answer && !errMsg}\n           >\n-            New Question\n-          </Button>\n+            Clear\n+          </button>\n         </div>\n-      </Form>\n+      </form>\n \n-      {(answer || error) && (\n-        <Card className=\"shadow-sm\">\n-          <Card.Header>Answer</Card.Header>\n-          <Card.Body>\n-            {error ? (\n-              <div className=\"text-danger\">{error}</div>\n-            ) : (\n-              <div style={{ whiteSpace: 'pre-wrap' }}>{answer}</div>\n-            )}\n-          </Card.Body>\n-        </Card>\n+      {errMsg && (\n+        <div className=\"alert alert-danger small\" role=\"alert\">\n+          {errMsg}\n+        </div>\n       )}\n-    </Container>\n-  )\n-}\n+\n+      {answer && (\n+        <div className=\"alert alert-success small\" role=\"alert\" style={{ whiteSpace: 'pre-wrap' }}>\n+          {answer}\n+        </div>\n+      )}\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1761753315728,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,16 +1,7 @@\n import { useState } from 'react';\n import axios from 'axios';\n \n-// point axios to backend base URL\n-// You already have axiosConfig.js — if that file exports axios with baseURL,\n-// just import that instead of raw axios.\n-// I'll show both options:\n-\n-// OPTION A: if you already have axiosConfig.js configured with baseURL\n-// import api from '../api/axiosConfig';\n-\n-// OPTION B: quick inline instance (use this if you don't have axiosConfig ready in this file)\n const api = axios.create({\n   baseURL: import.meta.env.VITE_API_BASE || 'http://localhost:5000/api/v1',\n   withCredentials: true,\n });\n"
                }
            ],
            "date": 1760210070821,
            "name": "Commit-0",
            "content": "import { useState } from 'react'\nimport api from '../api/axiosConfig'\n\nexport default function AiAssistant(){\n  const [q, setQ] = useState('')\n  const [a, setA] = useState('Ask the AI a question about your events!')\n  const ask = async ()=>{\n    const { data } = await api.post('/ai/ask', { question: q })\n    setA(data.answer || 'No answer')\n  }\n  return (\n    <div>\n      <h2>AI Event Assistant</h2>\n      <div className=\"input-group my-3\">\n        <input className=\"form-control\" value={q} onChange={e=>setQ(e.target.value)} placeholder=\"e.g., What tech events are this month?\" />\n        <button className=\"btn btn-primary\" onClick={ask}>Ask AI</button>\n      </div>\n      <div className=\"border rounded p-3 bg-body-tertiary\">{a}</div>\n    </div>\n  )\n}"
        }
    ]
}