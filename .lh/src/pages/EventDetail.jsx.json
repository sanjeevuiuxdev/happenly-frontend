{
    "sourceFile": "src/pages/EventDetail.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 21,
            "patches": [
                {
                    "date": 1760209996491,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760420346787,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,29 +1,52 @@\n import { useEffect, useState } from 'react'\n import { useParams } from 'react-router-dom'\n import { getEvent, applyEvent } from '../api/eventApi'\n-import { Button } from 'react-bootstrap'\n+import { Button, Carousel, Ratio } from 'react-bootstrap'\n \n export default function EventDetail(){\n   const { id } = useParams()\n   const [event, setEvent] = useState(null)\n   const [applied, setApplied] = useState(false)\n \n-  useEffect(()=>{(async()=>{\n+  useEffect(()=>{ (async()=>{\n     const { data } = await getEvent(id); setEvent(data)\n-  })()},[id])\n+  })() },[id])\n \n-  const apply = async ()=>{\n-    await applyEvent({ eventId: id })\n-    setApplied(true)\n-  }\n+  const apply = async ()=>{ await applyEvent({ eventId: id }); setApplied(true) }\n \n   if (!event) return <div>Loading…</div>\n+\n   return (\n     <div>\n-      <h2>{event.title}</h2>\n-      <div className=\"text-muted\">{new Date(event.startAt||event.date).toLocaleString()} • {event.location?.name||event.location}</div>\n\\ No newline at end of file\n-      <p className=\"mt-3\">{event.description}</p>\n-      <Button onClick={apply} disabled={applied} variant=\"primary\">{applied? 'Applied' : 'Apply'}</Button>\n+      <h2 className=\"mb-1\">{event.title}</h2>\n+      <div className=\"text-muted mb-3\">\n+        {new Date(event.startAt || event.date).toLocaleString()} • {event.location?.name || event.location || 'TBA'}\n+      </div>\n+\n+      {/* Media gallery */}\n+      {event.media?.length > 0 && (\n+        <div className=\"mb-4\">\n+          <Carousel variant=\"dark\" className=\"shadow-sm rounded overflow-hidden\">\n+            {event.media.map((m, i) => (\n+              <Carousel.Item key={i}>\n+                <Ratio aspectRatio=\"16x9\">\n+                  {m.kind === 'video'\n+                    ? <video src={m.url} controls style={{objectFit:'cover', width:'100%', height:'100%'}}/>\n+                    : <img src={m.url} alt={`media-${i}`} style={{objectFit:'cover', width:'100%', height:'100%'}}/>}\n+                </Ratio>\n+              </Carousel.Item>\n+            ))}\n+          </Carousel>\n+        </div>\n+      )}\n+\n+      <p>{event.description}</p>\n+\n+      <div className=\"d-flex gap-2\">\n+        <Button onClick={apply} disabled={applied} variant=\"primary\">\n+          {applied ? 'Applied' : 'Apply'}\n+        </Button>\n+      </div>\n     </div>\n   )\n-}\n+}\n"
                },
                {
                    "date": 1760506759699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -39,8 +39,10 @@\n           </Carousel>\n         </div>\n       )}\n \n+      \n+\n       <p>{event.description}</p>\n \n       <div className=\"d-flex gap-2\">\n         <Button onClick={apply} disabled={applied} variant=\"primary\">\n"
                },
                {
                    "date": 1760642762943,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,8 +7,25 @@\n   const { id } = useParams()\n   const [event, setEvent] = useState(null)\n   const [applied, setApplied] = useState(false)\n \n+\n+\n+  const handleApply = async () => {\n+    try {\n+      if (!event?._id) return alert('Invalid event id');\n+      await applyEvent({ eventId: event._id, note: '' });\n+      alert('Applied successfully!');\n+    } catch (err) {\n+      const msg =\n+        err.response?.data?.message ||\n+        (typeof err.response?.data === 'string' ? err.response.data : null) ||\n+        err.message;\n+      console.error('Apply failed:', err.response?.data || err);\n+      alert(msg); // e.g. \"eventId is required\" or \"You already applied for this event\"\n+    }\n+  };\n+\n   useEffect(()=>{ (async()=>{\n     const { data } = await getEvent(id); setEvent(data)\n   })() },[id])\n \n@@ -43,8 +60,20 @@\n       \n \n       <p>{event.description}</p>\n \n+      {(event.organizer?.name || event.organizer?.company || event.organizer?.email) && (\n+  <div className=\"mb-3\">\n+    <strong>Organizer:</strong>{' '}\n+    {event.organizer?.name || '—'}\n+    {event.organizer?.company ? ` — ${event.organizer.company}` : ''}\n+    {event.organizer?.email ? (\n+      <> — <a href={`mailto:${event.organizer.email}`}>{event.organizer.email}</a></>\n+    ) : null}\n+  </div>\n+)}\n+\n+\n       <div className=\"d-flex gap-2\">\n         <Button onClick={apply} disabled={applied} variant=\"primary\">\n           {applied ? 'Applied' : 'Apply'}\n         </Button>\n"
                },
                {
                    "date": 1760643368351,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,17 +12,17 @@\n \n   const handleApply = async () => {\n     try {\n       if (!event?._id) return alert('Invalid event id');\n-      await applyEvent({ eventId: event._id, note: '' });\n+      const { data } = await applyEvent(event._id);\n       alert('Applied successfully!');\n+      // optional: disable button or update UI with data\n     } catch (err) {\n       const msg =\n-        err.response?.data?.message ||\n-        (typeof err.response?.data === 'string' ? err.response.data : null) ||\n-        err.message;\n-      console.error('Apply failed:', err.response?.data || err);\n-      alert(msg); // e.g. \"eventId is required\" or \"You already applied for this event\"\n+        err?.response?.data?.message ||\n+        (err?.response?.status === 400 ? 'Bad request' : err.message);\n+      alert(`Apply failed: ${msg}`);\n+      console.error('apply error:', err?.response || err);\n     }\n   };\n \n   useEffect(()=>{ (async()=>{\n"
                },
                {
                    "date": 1760644931147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -28,9 +28,17 @@\n   useEffect(()=>{ (async()=>{\n     const { data } = await getEvent(id); setEvent(data)\n   })() },[id])\n \n-  const apply = async ()=>{ await applyEvent({ eventId: id }); setApplied(true) }\n+  const apply = async () => {\n+    try {\n+      await applyEvent(id);   // <-- pass the string id, not an object\n+      setApplied(true);\n+    } catch (err) {\n+      const msg = err?.response?.data?.message || err.message;\n+      alert(`Apply failed: ${msg}`);\n+    }\n+  };\n \n   if (!event) return <div>Loading…</div>\n \n   return (\n"
                },
                {
                    "date": 1760646075957,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,9 @@\n       setApplied(true);\n     } catch (err) {\n       const msg = err?.response?.data?.message || err.message;\n       alert(`Apply failed: ${msg}`);\n+      console.error(err?.response || err);\n     }\n   };\n \n   if (!event) return <div>Loading…</div>\n"
                },
                {
                    "date": 1760649001020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,92 @@\n+import { useEffect, useState } from 'react'\n+import { useParams } from 'react-router-dom'\n+import { getEvent, applyEvent } from '../api/eventApi'\n+import { Button, Carousel, Ratio } from 'react-bootstrap'\n+\n+export default function EventDetail(){\n+  const { id } = useParams()\n+  const [event, setEvent] = useState(null)\n+  const [applied, setApplied] = useState(false)\n+\n+\n+\n+  const handleApply = async () => {\n+    try {\n+      if (!event?._id) return alert('Invalid event id');\n+      const { data } = await applyEvent(event._id);\n+      alert('Applied successfully!');\n+      // optional: disable button or update UI with data\n+    } catch (err) {\n+      const msg =\n+        err?.response?.data?.message ||\n+        (err?.response?.status === 400 ? 'Bad request' : err.message);\n+      alert(`Apply failed: ${msg}`);\n+      console.error('apply error:', err?.response || err);\n+    }\n+  };\n+\n+  useEffect(()=>{ (async()=>{\n+    const { data } = await getEvent(id); setEvent(data)\n+  })() },[id])\n+\n+  const apply = async () => {\n+    try {\n+      await applyEvent(id);   // <-- pass the string id, not an object\n+      setApplied(true);\n+    } catch (err) {\n+      const msg = err?.response?.data?.message || err.message;\n+      alert(`Apply failed: ${msg}`);\n+      console.error(err?.response || err);\n+    }\n+  };\n+\n+  if (!event) return <div>Loading…</div>\n+\n+  return (\n+    <div>\n+      <h2 className=\"mb-1\">{event.title}</h2>\n+      <div className=\"text-muted mb-3\">\n+        {new Date(event.startAt || event.date).toLocaleString()} • {event.location?.name || event.location || 'TBA'}\n+      </div>\n+\n+      {/* Media gallery */}\n+      {event.media?.length > 0 && (\n+        <div className=\"mb-4\">\n+          <Carousel variant=\"dark\" className=\"shadow-sm rounded overflow-hidden\">\n+            {event.media.map((m, i) => (\n+              <Carousel.Item key={i}>\n+                <Ratio aspectRatio=\"16x9\">\n+                  {m.kind === 'video'\n+                    ? <video src={m.url} controls style={{objectFit:'cover', width:'100%', height:'100%'}}/>\n+                    : <img src={m.url} alt={`media-${i}`} style={{objectFit:'cover', width:'100%', height:'100%'}}/>}\n+                </Ratio>\n+              </Carousel.Item>\n+            ))}\n+          </Carousel>\n+        </div>\n+      )}\n+\n+      \n+\n+      <p>{event.description}</p>\n+\n+      {(event.organizer?.name || event.organizer?.company || event.organizer?.email) && (\n+  <div className=\"mb-3\">\n+    <strong>Organizer:</strong>{' '}\n+    {event.organizer?.name || '—'}\n+    {event.organizer?.company ? ` — ${event.organizer.company}` : ''}\n+    {event.organizer?.email ? (\n+      <> — <a href={`mailto:${event.organizer.email}`}>{event.organizer.email}</a></>\n+    ) : null}\n+  </div>\n+)}\n+\n+\n+      <div className=\"d-flex gap-2\">\n+        <Button onClick={apply} disabled={applied} variant=\"primary\">\n+          {applied ? 'Applied' : 'Apply'}\n+        </Button>\n+      </div>\n+    </div>\n+  )\n+}\n"
                },
                {
                    "date": 1760649010020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n \n       {/* Media gallery */}\n       {event.media?.length > 0 && (\n         <div className=\"mb-4\">\n-          <Carousel variant=\"dark\" className=\"shadow-sm rounded overflow-hidden\">\n+          <Carousel variant=\"dark\" className=\"shadow-sm rounded overflow-hidden col-sm-6\">\n             {event.media.map((m, i) => (\n               <Carousel.Item key={i}>\n                 <Ratio aspectRatio=\"16x9\">\n                   {m.kind === 'video'\n@@ -89,96 +89,4 @@\n       </div>\n     </div>\n   )\n }\n-import { useEffect, useState } from 'react'\n-import { useParams } from 'react-router-dom'\n-import { getEvent, applyEvent } from '../api/eventApi'\n-import { Button, Carousel, Ratio } from 'react-bootstrap'\n-\n-export default function EventDetail(){\n-  const { id } = useParams()\n-  const [event, setEvent] = useState(null)\n-  const [applied, setApplied] = useState(false)\n-\n-\n-\n-  const handleApply = async () => {\n-    try {\n-      if (!event?._id) return alert('Invalid event id');\n-      const { data } = await applyEvent(event._id);\n-      alert('Applied successfully!');\n-      // optional: disable button or update UI with data\n-    } catch (err) {\n-      const msg =\n-        err?.response?.data?.message ||\n-        (err?.response?.status === 400 ? 'Bad request' : err.message);\n-      alert(`Apply failed: ${msg}`);\n-      console.error('apply error:', err?.response || err);\n-    }\n-  };\n-\n-  useEffect(()=>{ (async()=>{\n-    const { data } = await getEvent(id); setEvent(data)\n-  })() },[id])\n-\n-  const apply = async () => {\n-    try {\n-      await applyEvent(id);   // <-- pass the string id, not an object\n-      setApplied(true);\n-    } catch (err) {\n-      const msg = err?.response?.data?.message || err.message;\n-      alert(`Apply failed: ${msg}`);\n-      console.error(err?.response || err);\n-    }\n-  };\n-\n-  if (!event) return <div>Loading…</div>\n-\n-  return (\n-    <div>\n-      <h2 className=\"mb-1\">{event.title}</h2>\n-      <div className=\"text-muted mb-3\">\n-        {new Date(event.startAt || event.date).toLocaleString()} • {event.location?.name || event.location || 'TBA'}\n-      </div>\n-\n-      {/* Media gallery */}\n-      {event.media?.length > 0 && (\n-        <div className=\"mb-4\">\n-          <Carousel variant=\"dark\" className=\"shadow-sm rounded overflow-hidden\">\n-            {event.media.map((m, i) => (\n-              <Carousel.Item key={i}>\n-                <Ratio aspectRatio=\"16x9\">\n-                  {m.kind === 'video'\n-                    ? <video src={m.url} controls style={{objectFit:'cover', width:'100%', height:'100%'}}/>\n-                    : <img src={m.url} alt={`media-${i}`} style={{objectFit:'cover', width:'100%', height:'100%'}}/>}\n-                </Ratio>\n-              </Carousel.Item>\n-            ))}\n-          </Carousel>\n-        </div>\n-      )}\n-\n-      \n-\n-      <p>{event.description}</p>\n-\n-      {(event.organizer?.name || event.organizer?.company || event.organizer?.email) && (\n-  <div className=\"mb-3\">\n-    <strong>Organizer:</strong>{' '}\n-    {event.organizer?.name || '—'}\n-    {event.organizer?.company ? ` — ${event.organizer.company}` : ''}\n-    {event.organizer?.email ? (\n-      <> — <a href={`mailto:${event.organizer.email}`}>{event.organizer.email}</a></>\n-    ) : null}\n-  </div>\n-)}\n-\n-\n-      <div className=\"d-flex gap-2\">\n-        <Button onClick={apply} disabled={applied} variant=\"primary\">\n-          {applied ? 'Applied' : 'Apply'}\n-        </Button>\n-      </div>\n-    </div>\n-  )\n-}\n"
                },
                {
                    "date": 1760649028582,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -51,9 +51,9 @@\n \n       {/* Media gallery */}\n       {event.media?.length > 0 && (\n         <div className=\"mb-4\">\n-          <Carousel variant=\"dark\" className=\"shadow-sm rounded overflow-hidden col-sm-6\">\n+          <Carousel variant=\"dark\" na className=\"shadow-sm rounded overflow-hidden col-sm-6\">\n             {event.media.map((m, i) => (\n               <Carousel.Item key={i}>\n                 <Ratio aspectRatio=\"16x9\">\n                   {m.kind === 'video'\n"
                },
                {
                    "date": 1761126131079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,92 +1,99 @@\n-import { useEffect, useState } from 'react'\n-import { useParams } from 'react-router-dom'\n-import { getEvent, applyEvent } from '../api/eventApi'\n-import { Button, Carousel, Ratio } from 'react-bootstrap'\n+import { useEffect, useState } from 'react';\n+import { useParams } from 'react-router-dom';\n+import { getEvent, applyEvent } from '../api/eventApi';\n+import { Button, Carousel, Ratio } from 'react-bootstrap';\n \n-export default function EventDetail(){\n-  const { id } = useParams()\n-  const [event, setEvent] = useState(null)\n-  const [applied, setApplied] = useState(false)\n+export default function EventDetail() {\n+  const { id } = useParams();\n+  const [event, setEvent] = useState(null);\n+  const [applied, setApplied] = useState(false);\n \n+  // small helper so we never render an object\n+  const asText = (val) => {\n+    if (typeof val === 'string' || typeof val === 'number') return val;\n+    if (val && typeof val === 'object') return val.name || 'TBA';\n+    return 'TBA';\n+  };\n \n+  useEffect(() => {\n+    (async () => {\n+      const { data } = await getEvent(id);\n+      setEvent(data);\n+    })();\n+  }, [id]);\n \n-  const handleApply = async () => {\n+  const onApply = async () => {\n     try {\n-      if (!event?._id) return alert('Invalid event id');\n-      const { data } = await applyEvent(event._id);\n+      await applyEvent({ eventId: id }); // <-- backend expects { eventId }\n+      setApplied(true);\n       alert('Applied successfully!');\n-      // optional: disable button or update UI with data\n     } catch (err) {\n       const msg =\n         err?.response?.data?.message ||\n         (err?.response?.status === 400 ? 'Bad request' : err.message);\n       alert(`Apply failed: ${msg}`);\n-      console.error('apply error:', err?.response || err);\n-    }\n-  };\n-\n-  useEffect(()=>{ (async()=>{\n-    const { data } = await getEvent(id); setEvent(data)\n-  })() },[id])\n-\n-  const apply = async () => {\n-    try {\n-      await applyEvent(id);   // <-- pass the string id, not an object\n-      setApplied(true);\n-    } catch (err) {\n-      const msg = err?.response?.data?.message || err.message;\n-      alert(`Apply failed: ${msg}`);\n       console.error(err?.response || err);\n     }\n   };\n \n-  if (!event) return <div>Loading…</div>\n+  if (!event) return <div>Loading…</div>;\n \n   return (\n     <div>\n       <h2 className=\"mb-1\">{event.title}</h2>\n+\n       <div className=\"text-muted mb-3\">\n-        {new Date(event.startAt || event.date).toLocaleString()} • {event.location?.name || event.location || 'TBA'}\n+        {new Date(event.startAt || event.date).toLocaleString()} • {asText(event.location)}\n       </div>\n \n       {/* Media gallery */}\n-      {event.media?.length > 0 && (\n+      {!!event.media?.length && (\n         <div className=\"mb-4\">\n-          <Carousel variant=\"dark\" na className=\"shadow-sm rounded overflow-hidden col-sm-6\">\n+          <Carousel variant=\"dark\" className=\"shadow-sm rounded overflow-hidden col-sm-6\">\n             {event.media.map((m, i) => (\n               <Carousel.Item key={i}>\n                 <Ratio aspectRatio=\"16x9\">\n-                  {m.kind === 'video'\n-                    ? <video src={m.url} controls style={{objectFit:'cover', width:'100%', height:'100%'}}/>\n-                    : <img src={m.url} alt={`media-${i}`} style={{objectFit:'cover', width:'100%', height:'100%'}}/>}\n+                  {m.kind === 'video' ? (\n+                    <video\n+                      src={m.url}\n+                      controls\n+                      style={{ objectFit: 'cover', width: '100%', height: '100%' }}\n+                    />\n+                  ) : (\n+                    <img\n+                      src={m.url}\n+                      alt={`media-${i}`}\n+                      style={{ objectFit: 'cover', width: '100%', height: '100%' }}\n+                    />\n+                  )}\n                 </Ratio>\n               </Carousel.Item>\n             ))}\n           </Carousel>\n         </div>\n       )}\n \n-      \n-\n       <p>{event.description}</p>\n \n       {(event.organizer?.name || event.organizer?.company || event.organizer?.email) && (\n-  <div className=\"mb-3\">\n-    <strong>Organizer:</strong>{' '}\n-    {event.organizer?.name || '—'}\n-    {event.organizer?.company ? ` — ${event.organizer.company}` : ''}\n-    {event.organizer?.email ? (\n-      <> — <a href={`mailto:${event.organizer.email}`}>{event.organizer.email}</a></>\n-    ) : null}\n-  </div>\n-)}\n+        <div className=\"mb-3\">\n+          <strong>Organizer:</strong>{' '}\n+          {event.organizer?.name || '—'}\n+          {event.organizer?.company ? ` — ${event.organizer.company}` : ''}\n+          {event.organizer?.email ? (\n+            <>\n+              {' '}\n+              — <a href={`mailto:${event.organizer.email}`}>{event.organizer.email}</a>\n+            </>\n+          ) : null}\n+        </div>\n+      )}\n \n-\n       <div className=\"d-flex gap-2\">\n-        <Button onClick={apply} disabled={applied} variant=\"primary\">\n+        <Button onClick={onApply} disabled={applied} variant=\"primary\">\n           {applied ? 'Applied' : 'Apply'}\n         </Button>\n       </div>\n     </div>\n-  )\n+  );\n }\n"
                },
                {
                    "date": 1761129764503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,82 @@\n-import { useEffect, useState } from 'react';\n+import { useEffect, useState, useMemo } from 'react';\n import { useParams } from 'react-router-dom';\n import { getEvent, applyEvent } from '../api/eventApi';\n import { Button, Carousel, Ratio } from 'react-bootstrap';\n \n+// ---- helpers ---------------------------------------------------------------\n+\n+// If admin pasted a Google Maps iframe, extract only the src attribute.\n+// Returns null if no iframe found.\n+function extractIframeSrc(htmlOrText = '') {\n+  if (typeof htmlOrText !== 'string') return null;\n+  const match = htmlOrText.match(/<iframe[^>]*\\s+src=[\"']([^\"']+)[\"'][^>]*>/i);\n+  return match ? match[1] : null;\n+}\n+\n+// For display (cards/titles), turn location into a short label.\n+function locationLabel(loc) {\n+  if (!loc) return 'TBA';\n+  if (typeof loc === 'string') {\n+    // If it's an iframe string, show generic label\n+    if (/<iframe/i.test(loc)) return 'See map below';\n+    // else show the text directly\n+    return loc;\n+  }\n+  return loc?.name || 'TBA';\n+}\n+\n+// ----------------------------------------------------------------------------\n+\n export default function EventDetail() {\n   const { id } = useParams();\n   const [event, setEvent] = useState(null);\n   const [applied, setApplied] = useState(false);\n \n-  // small helper so we never render an object\n-  const asText = (val) => {\n-    if (typeof val === 'string' || typeof val === 'number') return val;\n-    if (val && typeof val === 'object') return val.name || 'TBA';\n-    return 'TBA';\n-  };\n-\n   useEffect(() => {\n     (async () => {\n       const { data } = await getEvent(id);\n       setEvent(data);\n     })();\n   }, [id]);\n \n-  const onApply = async () => {\n+  const handleApply = async () => {\n     try {\n-      await applyEvent({ eventId: id }); // <-- backend expects { eventId }\n+      if (!event?._id) return alert('Invalid event id');\n+      await applyEvent(event._id);\n       setApplied(true);\n       alert('Applied successfully!');\n     } catch (err) {\n       const msg =\n         err?.response?.data?.message ||\n         (err?.response?.status === 400 ? 'Bad request' : err.message);\n       alert(`Apply failed: ${msg}`);\n-      console.error(err?.response || err);\n+      console.error('apply error:', err?.response || err);\n     }\n   };\n \n+  // figure out if we have a map to embed\n+  const mapSrc = useMemo(() => {\n+    // event.location might be string or { name, ... }\n+    if (!event?.location) return null;\n+    if (typeof event.location === 'string') return extractIframeSrc(event.location);\n+    // if an object with 'embed' field in the future:\n+    if (typeof event.location?.embed === 'string') return extractIframeSrc(event.location.embed);\n+    return null;\n+  }, [event]);\n+\n   if (!event) return <div>Loading…</div>;\n \n   return (\n     <div>\n       <h2 className=\"mb-1\">{event.title}</h2>\n \n       <div className=\"text-muted mb-3\">\n-        {new Date(event.startAt || event.date).toLocaleString()} • {asText(event.location)}\n+        {new Date(event.startAt || event.date).toLocaleString()} • {locationLabel(event.location)}\n       </div>\n \n       {/* Media gallery */}\n-      {!!event.media?.length && (\n+      {event.media?.length > 0 && (\n         <div className=\"mb-4\">\n           <Carousel variant=\"dark\" className=\"shadow-sm rounded overflow-hidden col-sm-6\">\n             {event.media.map((m, i) => (\n               <Carousel.Item key={i}>\n@@ -72,10 +100,12 @@\n           </Carousel>\n         </div>\n       )}\n \n-      <p>{event.description}</p>\n+      {/* Description */}\n+      {event.description && <p>{event.description}</p>}\n \n+      {/* Organizer */}\n       {(event.organizer?.name || event.organizer?.company || event.organizer?.email) && (\n         <div className=\"mb-3\">\n           <strong>Organizer:</strong>{' '}\n           {event.organizer?.name || '—'}\n@@ -88,10 +118,26 @@\n           ) : null}\n         </div>\n       )}\n \n+      {/* Embedded map (safe: we render only the src attr) */}\n+      {mapSrc && (\n+        <div className=\"mb-4 col-sm-8\">\n+          <div className=\"ratio ratio-16x9 rounded overflow-hidden shadow-sm\">\n+            <iframe\n+              src={mapSrc}\n+              style={{ border: 0 }}\n+              loading=\"lazy\"\n+              referrerPolicy=\"no-referrer-when-downgrade\"\n+              allowFullScreen\n+              title=\"Event location map\"\n+            />\n+          </div>\n+        </div>\n+      )}\n+\n       <div className=\"d-flex gap-2\">\n-        <Button onClick={onApply} disabled={applied} variant=\"primary\">\n+        <Button onClick={handleApply} disabled={applied} variant=\"primary\">\n           {applied ? 'Applied' : 'Apply'}\n         </Button>\n       </div>\n     </div>\n"
                },
                {
                    "date": 1761130715183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,11 +69,22 @@\n   return (\n     <div>\n       <h2 className=\"mb-1\">{event.title}</h2>\n \n-      <div className=\"text-muted mb-3\">\n-        {new Date(event.startAt || event.date).toLocaleString()} • {locationLabel(event.location)}\n-      </div>\n+      {event.location && typeof event.location === 'string' && /<iframe/i.test(event.location) && (\n+  <div className=\"mb-4 col-sm-8\">\n+    <div className=\"ratio ratio-16x9 rounded overflow-hidden shadow-sm\">\n+      <iframe\n+        src={(event.location.match(/src=\"([^\"]+)\"/) || [])[1]}\n+        style={{ border: 0 }}\n+        loading=\"lazy\"\n+        referrerPolicy=\"no-referrer-when-downgrade\"\n+        allowFullScreen\n+        title=\"Event location map\"\n+      />\n+    </div>\n+  </div>\n+)}\n \n       {/* Media gallery */}\n       {event.media?.length > 0 && (\n         <div className=\"mb-4\">\n"
                },
                {
                    "date": 1761130743263,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,22 +69,11 @@\n   return (\n     <div>\n       <h2 className=\"mb-1\">{event.title}</h2>\n \n-      {event.location && typeof event.location === 'string' && /<iframe/i.test(event.location) && (\n-  <div className=\"mb-4 col-sm-8\">\n-    <div className=\"ratio ratio-16x9 rounded overflow-hidden shadow-sm\">\n-      <iframe\n-        src={(event.location.match(/src=\"([^\"]+)\"/) || [])[1]}\n-        style={{ border: 0 }}\n-        loading=\"lazy\"\n-        referrerPolicy=\"no-referrer-when-downgrade\"\n-        allowFullScreen\n-        title=\"Event location map\"\n-      />\n-    </div>\n-  </div>\n-)}\n+      <div className=\"text-muted mb-3\">\n+        {new Date(event.startAt || event.date).toLocaleString()} • {locationLabel(event.location)}\n+      </div>\n \n       {/* Media gallery */}\n       {event.media?.length > 0 && (\n         <div className=\"mb-4\">\n"
                },
                {
                    "date": 1761130781649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,22 +119,22 @@\n         </div>\n       )}\n \n       {/* Embedded map (safe: we render only the src attr) */}\n-      {mapSrc && (\n-        <div className=\"mb-4 col-sm-8\">\n-          <div className=\"ratio ratio-16x9 rounded overflow-hidden shadow-sm\">\n-            <iframe\n-              src={mapSrc}\n-              style={{ border: 0 }}\n-              loading=\"lazy\"\n-              referrerPolicy=\"no-referrer-when-downgrade\"\n-              allowFullScreen\n-              title=\"Event location map\"\n-            />\n-          </div>\n-        </div>\n-      )}\n+      {event.location && typeof event.location === 'string' && /<iframe/i.test(event.location) && (\n+  <div className=\"mb-4 col-sm-8\">\n+    <div className=\"ratio ratio-16x9 rounded overflow-hidden shadow-sm\">\n+      <iframe\n+        src={(event.location.match(/src=\"([^\"]+)\"/) || [])[1]}\n+        style={{ border: 0 }}\n+        loading=\"lazy\"\n+        referrerPolicy=\"no-referrer-when-downgrade\"\n+        allowFullScreen\n+        title=\"Event location map\"\n+      />\n+    </div>\n+  </div>\n+)}\n \n       <div className=\"d-flex gap-2\">\n         <Button onClick={handleApply} disabled={applied} variant=\"primary\">\n           {applied ? 'Applied' : 'Apply'}\n"
                },
                {
                    "date": 1761130794993,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,22 +119,22 @@\n         </div>\n       )}\n \n       {/* Embedded map (safe: we render only the src attr) */}\n-      {event.location && typeof event.location === 'string' && /<iframe/i.test(event.location) && (\n-  <div className=\"mb-4 col-sm-8\">\n-    <div className=\"ratio ratio-16x9 rounded overflow-hidden shadow-sm\">\n-      <iframe\n-        src={(event.location.match(/src=\"([^\"]+)\"/) || [])[1]}\n-        style={{ border: 0 }}\n-        loading=\"lazy\"\n-        referrerPolicy=\"no-referrer-when-downgrade\"\n-        allowFullScreen\n-        title=\"Event location map\"\n-      />\n-    </div>\n-  </div>\n-)}\n+      {mapSrc && (\n+        <div className=\"mb-4 col-sm-8\">\n+          <div className=\"ratio ratio-16x9 rounded overflow-hidden shadow-sm\">\n+            <iframe\n+              src={mapSrc}\n+              style={{ border: 0 }}\n+              loading=\"lazy\"\n+              referrerPolicy=\"no-referrer-when-downgrade\"\n+              allowFullScreen\n+              title=\"Event location map\"\n+            />\n+          </div>\n+        </div>\n+      )}\n \n       <div className=\"d-flex gap-2\">\n         <Button onClick={handleApply} disabled={applied} variant=\"primary\">\n           {applied ? 'Applied' : 'Apply'}\n"
                },
                {
                    "date": 1761130889065,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n // If admin pasted a Google Maps iframe, extract only the src attribute.\n // Returns null if no iframe found.\n function extractIframeSrc(htmlOrText = '') {\n   if (typeof htmlOrText !== 'string') return null;\n-  const match = htmlOrText.match(/<iframe[^>]*\\s+src=[\"']([^\"']+)[\"'][^>]*>/i);\n+  const match = htmlOrText.match(/<iframe[^>]+src=[\"']([^\"']+)[\"']/i);\n   return match ? match[1] : null;\n }\n \n // For display (cards/titles), turn location into a short label.\n@@ -120,21 +120,21 @@\n       )}\n \n       {/* Embedded map (safe: we render only the src attr) */}\n       {mapSrc && (\n-        <div className=\"mb-4 col-sm-8\">\n-          <div className=\"ratio ratio-16x9 rounded overflow-hidden shadow-sm\">\n-            <iframe\n-              src={mapSrc}\n-              style={{ border: 0 }}\n-              loading=\"lazy\"\n-              referrerPolicy=\"no-referrer-when-downgrade\"\n-              allowFullScreen\n-              title=\"Event location map\"\n-            />\n-          </div>\n-        </div>\n-      )}\n+  <div className=\"mb-4 col-sm-8\">\n+    <div className=\"ratio ratio-16x9 rounded overflow-hidden shadow-sm\">\n+      <iframe\n+        src={mapSrc}\n+        style={{ border: 0 }}\n+        loading=\"lazy\"\n+        referrerPolicy=\"no-referrer-when-downgrade\"\n+        allowFullScreen\n+        title=\"Event location map\"\n+      />\n+    </div>\n+  </div>\n+)}\n \n       <div className=\"d-flex gap-2\">\n         <Button onClick={handleApply} disabled={applied} variant=\"primary\">\n           {applied ? 'Applied' : 'Apply'}\n"
                },
                {
                    "date": 1761131138720,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,17 +53,26 @@\n       console.error('apply error:', err?.response || err);\n     }\n   };\n \n-  // figure out if we have a map to embed\n   const mapSrc = useMemo(() => {\n-    // event.location might be string or { name, ... }\n-    if (!event?.location) return null;\n-    if (typeof event.location === 'string') return extractIframeSrc(event.location);\n-    // if an object with 'embed' field in the future:\n-    if (typeof event.location?.embed === 'string') return extractIframeSrc(event.location.embed);\n+    if (!event || !event.location) return null;\n+  \n+    // if it's a simple string\n+    if (typeof event.location === 'string') {\n+      const match = event.location.match(/<iframe[^>]+src=[\"']([^\"']+)[\"']/i);\n+      return match ? match[1] : null;\n+    }\n+  \n+    // if it's an object (some APIs return location as { name: \"...iframe...\" })\n+    if (typeof event.location?.name === 'string') {\n+      const match = event.location.name.match(/<iframe[^>]+src=[\"']([^\"']+)[\"']/i);\n+      return match ? match[1] : null;\n+    }\n+  \n     return null;\n   }, [event]);\n+  \n \n   if (!event) return <div>Loading…</div>;\n \n   return (\n"
                },
                {
                    "date": 1761131163649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,8 +74,12 @@\n   \n \n   if (!event) return <div>Loading…</div>;\n \n+  useEffect(() => {\n+    console.log('Event data:', event);\n+  }, [event]);\n+\n   return (\n     <div>\n       <h2 className=\"mb-1\">{event.title}</h2>\n \n"
                },
                {
                    "date": 1761131178801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -74,11 +74,9 @@\n   \n \n   if (!event) return <div>Loading…</div>;\n \n-  useEffect(() => {\n-    console.log('Event data:', event);\n-  }, [event]);\n+  \n \n   return (\n     <div>\n       <h2 className=\"mb-1\">{event.title}</h2>\n"
                },
                {
                    "date": 1761131199716,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -80,11 +80,11 @@\n   return (\n     <div>\n       <h2 className=\"mb-1\">{event.title}</h2>\n \n-      <div className=\"text-muted mb-3\">\n+      {/* <div className=\"text-muted mb-3\">\n         {new Date(event.startAt || event.date).toLocaleString()} • {locationLabel(event.location)}\n-      </div>\n+      </div> */}\n \n       {/* Media gallery */}\n       {event.media?.length > 0 && (\n         <div className=\"mb-4\">\n"
                },
                {
                    "date": 1761235273683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,12 +145,19 @@\n     </div>\n   </div>\n )}\n \n-      <div className=\"d-flex gap-2\">\n-        <Button onClick={handleApply} disabled={applied} variant=\"primary\">\n-          {applied ? 'Applied' : 'Apply'}\n-        </Button>\n-      </div>\n+{(() => {\n+  const user = JSON.parse(localStorage.getItem('user') || '{}');\n+  if (user?.role === 'admin') return null;\n+\n+  return (\n+    <div className=\"d-flex gap-2 mt-3\">\n+      <Button onClick={handleApply} disabled={applied} variant=\"primary\">\n+        {applied ? 'Applied' : 'Apply'}\n+      </Button>\n     </div>\n   );\n+})()}\n+    </div>\n+  );\n }\n"
                }
            ],
            "date": 1760209996491,
            "name": "Commit-0",
            "content": "import { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { getEvent, applyEvent } from '../api/eventApi'\nimport { Button } from 'react-bootstrap'\n\nexport default function EventDetail(){\n  const { id } = useParams()\n  const [event, setEvent] = useState(null)\n  const [applied, setApplied] = useState(false)\n\n  useEffect(()=>{(async()=>{\n    const { data } = await getEvent(id); setEvent(data)\n  })()},[id])\n\n  const apply = async ()=>{\n    await applyEvent({ eventId: id })\n    setApplied(true)\n  }\n\n  if (!event) return <div>Loading…</div>\n  return (\n    <div>\n      <h2>{event.title}</h2>\n      <div className=\"text-muted\">{new Date(event.startAt||event.date).toLocaleString()} • {event.location?.name||event.location}</div>\n      <p className=\"mt-3\">{event.description}</p>\n      <Button onClick={apply} disabled={applied} variant=\"primary\">{applied? 'Applied' : 'Apply'}</Button>\n    </div>\n  )\n}"
        }
    ]
}