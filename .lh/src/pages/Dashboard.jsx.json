{
    "sourceFile": "src/pages/Dashboard.jsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 5,
            "patches": [
                {
                    "date": 1760210051050,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1760415667137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,165 @@\n-export default function Dashboard(){\n-    return (\n-      <div>\n-        <h2>Admin Dashboard</h2>\n-        <p className=\"text-muted\">View applicants and event stats here.</p>\n+import { useEffect, useState } from 'react';\n+import { listEvents } from '../api/eventApi';\n+import { listApplications, appStats } from '../api/eventApi';\n\\ No newline at end of file\n+import { Table, Badge, Form, Row, Col, Card } from 'react-bootstrap';\n+\n+export default function Dashboard() {\n+  const role = localStorage.getItem('role') || 'user';\n+  if (role !== 'admin') return <div className=\"text-danger\">Forbidden: Admins only</div>;\n+\n+  const [events, setEvents] = useState([]);\n+  const [apps, setApps] = useState([]);\n+  const [stats, setStats] = useState([]);\n+  const [total, setTotal] = useState(0);\n+  const [filters, setFilters] = useState({ eventId: '', status: '', page: 1, limit: 20 });\n+  const [loading, setLoading] = useState(false);\n+\n+  useEffect(() => {\n+    // preload events for filter dropdown + stats\n+    (async () => {\n+      const ev = await listEvents({ limit: 500, sort: 'startAt', order: 'desc' });\n+      setEvents(ev.data.items || ev.data);\n+      const st = await appStats();\n+      setStats(st.data.stats || []);\n+    })();\n+  }, []);\n+\n+  useEffect(() => {\n+    fetchApplications();\n+    // eslint-disable-next-line\n+  }, [filters.eventId, filters.status, filters.page, filters.limit]);\n+\n+  async function fetchApplications() {\n+    setLoading(true);\n+    try {\n+      const { data } = await listApplications(filters);\n+      setApps(data.items);\n+      setTotal(data.total);\n+    } finally {\n+      setLoading(false);\n+    }\n+  }\n+\n+  const update = (k, v) => setFilters(prev => ({ ...prev, [k]: v, page: 1 }));\n+\n+  return (\n+    <div>\n+      <h2 className=\"mb-3\">Admin Dashboard</h2>\n+\n+      {/* Stats row */}\n+      <Row className=\"g-3 mb-3\">\n+        <Col md={4}>\n+          <Card className=\"shadow-sm\">\n+            <Card.Body>\n+              <div className=\"text-muted\">Total Applications</div>\n+              <div className=\"fs-3 fw-bold\">{stats.reduce((a, b) => a + b.applications, 0)}</div>\n+            </Card.Body>\n+          </Card>\n+        </Col>\n+        <Col md={4}>\n+          <Card className=\"shadow-sm\">\n+            <Card.Body>\n+              <div className=\"text-muted\">Top Event</div>\n+              <div className=\"fw-semibold\">\n+                {stats[0]?.title || '—'}{' '}\n+                {stats[0] && <Badge bg=\"primary\" className=\"ms-2\">{stats[0].applications}</Badge>}\n+              </div>\n+            </Card.Body>\n+          </Card>\n+        </Col>\n+        <Col md={4}>\n+          <Card className=\"shadow-sm\">\n+            <Card.Body>\n+              <div className=\"text-muted\">Events With Applicants</div>\n+              <div className=\"fs-3 fw-bold\">{stats.length}</div>\n+            </Card.Body>\n+          </Card>\n+        </Col>\n+      </Row>\n+\n+      {/* Filters */}\n+      <Form className=\"mb-3\">\n+        <Row className=\"g-2\">\n+          <Col md={6}>\n+            <Form.Select value={filters.eventId} onChange={(e) => update('eventId', e.target.value)}>\n+              <option value=\"\">All Events</option>\n+              {events.map(ev => (\n+                <option key={ev._id} value={ev._id}>\n+                  {ev.title} — {new Date(ev.startAt || ev.date).toLocaleDateString()}\n+                </option>\n+              ))}\n+            </Form.Select>\n+          </Col>\n+          <Col md={3}>\n+            <Form.Select value={filters.status} onChange={(e) => update('status', e.target.value)}>\n+              <option value=\"\">All Statuses</option>\n+              <option value=\"applied\">Applied</option>\n+              <option value=\"waitlist\">Waitlist</option>\n+              <option value=\"accepted\">Accepted</option>\n+              <option value=\"rejected\">Rejected</option>\n+            </Form.Select>\n+          </Col>\n+          <Col md={3}>\n+            <Form.Select value={filters.limit} onChange={(e) => update('limit', Number(e.target.value))}>\n+              {[10, 20, 50, 100].map(n => <option key={n} value={n}>{n} per page</option>)}\n+            </Form.Select>\n+          </Col>\n+        </Row>\n+      </Form>\n+\n+      {/* Table */}\n+      <div className=\"table-responsive shadow-sm rounded\">\n+        <Table hover className=\"mb-0\">\n+          <thead className=\"table-light\">\n+            <tr>\n+              <th>#</th>\n+              <th>Event</th>\n+              <th>Applicant</th>\n+              <th>Email</th>\n+              <th>Status</th>\n+              <th>Applied At</th>\n+            </tr>\n+          </thead>\n+          <tbody>\n+            {loading && (\n+              <tr><td colSpan={6} className=\"text-muted\">Loading…</td></tr>\n+            )}\n+            {!loading && apps.length === 0 && (\n+              <tr><td colSpan={6} className=\"text-muted\">No applications.</td></tr>\n+            )}\n+            {!loading && apps.map((a, i) => (\n+              <tr key={a._id}>\n+                <td>{(filters.page - 1) * filters.limit + i + 1}</td>\n+                <td>{a.event?.title || '—'}</td>\n+                <td>{a.user?.name || '—'}</td>\n+                <td>{a.user?.email || '—'}</td>\n+                <td>\n+                  <Badge bg={\n+                    a.status === 'accepted' ? 'success' :\n+                    a.status === 'rejected' ? 'danger' :\n+                    a.status === 'waitlist' ? 'warning' : 'secondary'\n+                  }>\n+                    {a.status}\n+                  </Badge>\n+                </td>\n+                <td>{new Date(a.createdAt).toLocaleString()}</td>\n+              </tr>\n+            ))}\n+          </tbody>\n+        </Table>\n       </div>\n-    )\n-  }\n+\n+      {/* Simple pagination */}\n+      <div className=\"d-flex justify-content-between align-items-center mt-3\">\n+        <div className=\"text-muted\">Total: {total}</div>\n+        <div className=\"btn-group\">\n+          <button className=\"btn btn-outline-secondary\" disabled={filters.page === 1}\n+                  onClick={() => setFilters(p => ({ ...p, page: p.page - 1 }))}>Prev</button>\n+          <button className=\"btn btn-outline-secondary\"\n+                  disabled={filters.page * filters.limit >= total}\n+                  onClick={() => setFilters(p => ({ ...p, page: p.page + 1 }))}>Next</button>\n+        </div>\n+      </div>\n+    </div>\n+  );\n+}\n"
                },
                {
                    "date": 1760505480169,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -89,18 +89,10 @@\n                 </option>\n               ))}\n             </Form.Select>\n           </Col>\n+          \n           <Col md={3}>\n-            <Form.Select value={filters.status} onChange={(e) => update('status', e.target.value)}>\n-              <option value=\"\">All Statuses</option>\n-              <option value=\"applied\">Applied</option>\n-              <option value=\"waitlist\">Waitlist</option>\n-              <option value=\"accepted\">Accepted</option>\n-              <option value=\"rejected\">Rejected</option>\n-            </Form.Select>\n-          </Col>\n-          <Col md={3}>\n             <Form.Select value={filters.limit} onChange={(e) => update('limit', Number(e.target.value))}>\n               {[10, 20, 50, 100].map(n => <option key={n} value={n}>{n} per page</option>)}\n             </Form.Select>\n           </Col>\n@@ -161,5 +153,5 @@\n         </div>\n       </div>\n     </div>\n   );\n-}\n\\ No newline at end of file\n+}\n"
                },
                {
                    "date": 1760505488352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -79,9 +79,9 @@\n \n       {/* Filters */}\n       <Form className=\"mb-3\">\n         <Row className=\"g-2\">\n-          <Col md={6}>\n+          <Col md={8}>\n             <Form.Select value={filters.eventId} onChange={(e) => update('eventId', e.target.value)}>\n               <option value=\"\">All Events</option>\n               {events.map(ev => (\n                 <option key={ev._id} value={ev._id}>\n"
                },
                {
                    "date": 1760505494114,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -90,9 +90,9 @@\n               ))}\n             </Form.Select>\n           </Col>\n           \n-          <Col md={3}>\n+          <Col md={4}>\n             <Form.Select value={filters.limit} onChange={(e) => update('limit', Number(e.target.value))}>\n               {[10, 20, 50, 100].map(n => <option key={n} value={n}>{n} per page</option>)}\n             </Form.Select>\n           </Col>\n"
                },
                {
                    "date": 1761281372701,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n   }, []);\n \n   useEffect(() => {\n     fetchApplications();\n-    // eslint-disable-next-line\n+    \n   }, [filters.eventId, filters.status, filters.page, filters.limit]);\n \n   async function fetchApplications() {\n     setLoading(true);\n"
                }
            ],
            "date": 1760210051050,
            "name": "Commit-0",
            "content": "export default function Dashboard(){\n    return (\n      <div>\n        <h2>Admin Dashboard</h2>\n        <p className=\"text-muted\">View applicants and event stats here.</p>\n      </div>\n    )\n  }"
        }
    ]
}